/*   Parser spec. for simple imperative language      mrh 03-01 2014 */
%{
open AST
%}

%token <int> INT
%token <bool> BOOL
%token <string> STRING
%token <string> NAME
%token <string> BINOP
%token TRUE FALSE
%token ASG SKIP SEMI WHILE DO OD CONTOF LET IN END PROC CALL RETURN REC IF THEN ELSE FI
%token INT_T BOOL_T STRING_T VOID_T
%token COLON COMMA PRINT DOT TILDE
%token LPAR RPAR LBRAC RBRAC
%token EOF

%start Main Exp ExpList DecList Stm StmList Dec
%type <Exp> Exp
%type <Exp list> ExpList
%type <Dec> Dec
%type <Dec list> DecList
%type <Stm list> StmList
%type <Stm> Main Stm

%left BINOP
%nonassoc CONTOF

%%

Main:
    Stm EOF                             { $1 }

Type:
    INT_T             { IntT }
  | BOOL_T            { BoolT }
  | STRING_T          { StringT }
  | VOID_T            { VoidT }
  | TILDE Type        { RefT $2 }
  | Type LBRAC RBRAC  { ArrayT $1 }

TypedName:
    Type NAME { TypedId($1,$2) }

Stm:
	NAME ASG Exp                         { Asg(Var $1,$3) }
  | NAME LBRAC Exp RBRAC ASG Exp         { ArrayAsg(Var $1,$3,$6) }
  | WHILE Exp DO StmList OD				 { While($2,Seq $4) }
  | LET DecList IN StmList END           { Block($2,Seq $4) }
  | PRINT Exp                            { PrintLn $2 }
  // restrict CALL to this syntax, thus dont use 'Exp'
  | CALL NAME LPAR ExpList RPAR          { Call(Apply($2, $4)) }
  | IF Exp THEN StmList ELSE StmList FI  { Cond($2,Seq $4,Seq $6) }
  | IF Exp THEN StmList FI               { Cond($2,Seq $4,Seq []) }
  | RETURN Exp                           { Return $2 }

StmList:
    Stm                                 { [$1] }
  | Stm SEMI StmList                    { $1 :: $3 }

IdList :
                                        { [] }
   | TypedName                          { [$1] }
   | TypedName COMMA IdList             { $1 :: $3 }

Dec:
     TypedName COLON Exp                      { VarDec($1,$3) }
   | TypedName LBRAC Exp RBRAC COLON Exp      { ArrayDec($1,$3,$6) }
   | PROC Type NAME LPAR IdList RPAR Stm      { ProcDec($2,false,$3,$5,$7) }
   | REC PROC Type NAME LPAR IdList RPAR Stm  { ProcDec($3,true,$4,$6,$8) }

DecList:
                                        { [] }
   | Dec                                { [$1] }
   | Dec SEMI DecList                   { $1 :: $3 }

Exp:
    NAME                                 { Var $1 }
  | Exp DOT NAME                         { Prop($1, $3) }
  | Exp LBRAC Exp RBRAC                  { ArrayAcc($1, $3) }
  | INT                                  { Int $1 }
  | BOOL                                 { Bool $1 }
  | STRING                               { String $1}
  | CONTOF Exp                           { ContOf $2 }
  | LPAR Exp RPAR                        { $2 }
  | NAME LPAR ExpList RPAR               { Apply($1, $3) }
  | Exp BINOP Exp                        { Apply($2, [$1; $3]) }
  | LBRAC ExpList RBRAC                  { Array($2) }

ExpList:
                                        { [ ] }
  | Exp                                 { [$1]   }
  | Exp COMMA ExpList                   { $1 :: $3 }
