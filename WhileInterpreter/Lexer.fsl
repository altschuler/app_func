{
module Lexer
open System
open System.Text
open Parser
open Microsoft.FSharp.Text.Lexing

}

// These are some regular expression definitions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let char = ['A'-'Z' 'a'-'z']
let int = digit+
let identifier  = char(char|digit|['_'])*

rule tokenize = 
  parse
  | whitespace  { tokenize lexbuf }
  | newline     { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
  | int         { INT<| Int32.Parse(Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | "+"         { PLUS  } 
  | "-"         { MINUS } 
  | "*"         { TIMES }
  | "&"         { AND   }
  | "!"         { NEG   } 
  | "="         { EQ    } 
  | "<"         { LE    }
  | "("         { LPAR  } 
  | ")"         { RPAR  } 
  | ";"         { SEMI  }
  | ":="        { ASS   }
  | "true"		{TRUE}
  | "false"     { FALSE }
  | "if"        { IF   }
  | "fi"        { FI   }
  | "od"        { OD } 
  | "then"      { THEN   }
  | "else"      { ELSE   }
  | "while"		{ WHILE }
  | "do"		{ DO }
  | identifier  { VAR(Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | eof         { EOF }

