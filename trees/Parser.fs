// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRAC
  | RBRAC
  | COLON
  | COMMA
  | PRINT
  | DOT
  | TILDE
  | INT_T
  | BOOL_T
  | STRING_T
  | VOID_T
  | ASG
  | SKIP
  | SEMI
  | WHILE
  | DO
  | OD
  | CONTOF
  | LET
  | IN
  | END
  | PROC
  | CALL
  | RETURN
  | REC
  | IF
  | THEN
  | ELSE
  | FI
  | DECLS
  | TRUE
  | FALSE
  | BINOP of (string)
  | NAME of (string)
  | STRING of (string)
  | BOOL of (bool)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_PRINT
    | TOKEN_DOT
    | TOKEN_TILDE
    | TOKEN_INT_T
    | TOKEN_BOOL_T
    | TOKEN_STRING_T
    | TOKEN_VOID_T
    | TOKEN_ASG
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_CONTOF
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_PROC
    | TOKEN_CALL
    | TOKEN_RETURN
    | TOKEN_REC
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FI
    | TOKEN_DECLS
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BINOP
    | TOKEN_NAME
    | TOKEN_STRING
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startExp
    | NONTERM__startExpList
    | NONTERM__startDecList
    | NONTERM__startStm
    | NONTERM__startStmList
    | NONTERM__startDec
    | NONTERM_Main
    | NONTERM_Type
    | NONTERM_TypedName
    | NONTERM_Stm
    | NONTERM_StmList
    | NONTERM_IdList
    | NONTERM_Dec
    | NONTERM_DecList
    | NONTERM_Exp
    | NONTERM_ExpList

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRAC  -> 3 
  | RBRAC  -> 4 
  | COLON  -> 5 
  | COMMA  -> 6 
  | PRINT  -> 7 
  | DOT  -> 8 
  | TILDE  -> 9 
  | INT_T  -> 10 
  | BOOL_T  -> 11 
  | STRING_T  -> 12 
  | VOID_T  -> 13 
  | ASG  -> 14 
  | SKIP  -> 15 
  | SEMI  -> 16 
  | WHILE  -> 17 
  | DO  -> 18 
  | OD  -> 19 
  | CONTOF  -> 20 
  | LET  -> 21 
  | IN  -> 22 
  | END  -> 23 
  | PROC  -> 24 
  | CALL  -> 25 
  | RETURN  -> 26 
  | REC  -> 27 
  | IF  -> 28 
  | THEN  -> 29 
  | ELSE  -> 30 
  | FI  -> 31 
  | DECLS  -> 32 
  | TRUE  -> 33 
  | FALSE  -> 34 
  | BINOP _ -> 35 
  | NAME _ -> 36 
  | STRING _ -> 37 
  | BOOL _ -> 38 
  | INT _ -> 39 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRAC 
  | 4 -> TOKEN_RBRAC 
  | 5 -> TOKEN_COLON 
  | 6 -> TOKEN_COMMA 
  | 7 -> TOKEN_PRINT 
  | 8 -> TOKEN_DOT 
  | 9 -> TOKEN_TILDE 
  | 10 -> TOKEN_INT_T 
  | 11 -> TOKEN_BOOL_T 
  | 12 -> TOKEN_STRING_T 
  | 13 -> TOKEN_VOID_T 
  | 14 -> TOKEN_ASG 
  | 15 -> TOKEN_SKIP 
  | 16 -> TOKEN_SEMI 
  | 17 -> TOKEN_WHILE 
  | 18 -> TOKEN_DO 
  | 19 -> TOKEN_OD 
  | 20 -> TOKEN_CONTOF 
  | 21 -> TOKEN_LET 
  | 22 -> TOKEN_IN 
  | 23 -> TOKEN_END 
  | 24 -> TOKEN_PROC 
  | 25 -> TOKEN_CALL 
  | 26 -> TOKEN_RETURN 
  | 27 -> TOKEN_REC 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_THEN 
  | 30 -> TOKEN_ELSE 
  | 31 -> TOKEN_FI 
  | 32 -> TOKEN_DECLS 
  | 33 -> TOKEN_TRUE 
  | 34 -> TOKEN_FALSE 
  | 35 -> TOKEN_BINOP 
  | 36 -> TOKEN_NAME 
  | 37 -> TOKEN_STRING 
  | 38 -> TOKEN_BOOL 
  | 39 -> TOKEN_INT 
  | 42 -> TOKEN_end_of_input
  | 40 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM__startExp 
    | 2 -> NONTERM__startExpList 
    | 3 -> NONTERM__startDecList 
    | 4 -> NONTERM__startStm 
    | 5 -> NONTERM__startStmList 
    | 6 -> NONTERM__startDec 
    | 7 -> NONTERM_Main 
    | 8 -> NONTERM_Type 
    | 9 -> NONTERM_Type 
    | 10 -> NONTERM_Type 
    | 11 -> NONTERM_Type 
    | 12 -> NONTERM_Type 
    | 13 -> NONTERM_Type 
    | 14 -> NONTERM_TypedName 
    | 15 -> NONTERM_Stm 
    | 16 -> NONTERM_Stm 
    | 17 -> NONTERM_Stm 
    | 18 -> NONTERM_Stm 
    | 19 -> NONTERM_Stm 
    | 20 -> NONTERM_Stm 
    | 21 -> NONTERM_Stm 
    | 22 -> NONTERM_Stm 
    | 23 -> NONTERM_Stm 
    | 24 -> NONTERM_StmList 
    | 25 -> NONTERM_StmList 
    | 26 -> NONTERM_IdList 
    | 27 -> NONTERM_IdList 
    | 28 -> NONTERM_IdList 
    | 29 -> NONTERM_Dec 
    | 30 -> NONTERM_Dec 
    | 31 -> NONTERM_Dec 
    | 32 -> NONTERM_Dec 
    | 33 -> NONTERM_Dec 
    | 34 -> NONTERM_DecList 
    | 35 -> NONTERM_DecList 
    | 36 -> NONTERM_DecList 
    | 37 -> NONTERM_Exp 
    | 38 -> NONTERM_Exp 
    | 39 -> NONTERM_Exp 
    | 40 -> NONTERM_Exp 
    | 41 -> NONTERM_Exp 
    | 42 -> NONTERM_Exp 
    | 43 -> NONTERM_Exp 
    | 44 -> NONTERM_Exp 
    | 45 -> NONTERM_Exp 
    | 46 -> NONTERM_Exp 
    | 47 -> NONTERM_Exp 
    | 48 -> NONTERM_ExpList 
    | 49 -> NONTERM_ExpList 
    | 50 -> NONTERM_ExpList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 42 
let _fsyacc_tagOfErrorTerminal = 40

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRAC  -> "LBRAC" 
  | RBRAC  -> "RBRAC" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | PRINT  -> "PRINT" 
  | DOT  -> "DOT" 
  | TILDE  -> "TILDE" 
  | INT_T  -> "INT_T" 
  | BOOL_T  -> "BOOL_T" 
  | STRING_T  -> "STRING_T" 
  | VOID_T  -> "VOID_T" 
  | ASG  -> "ASG" 
  | SKIP  -> "SKIP" 
  | SEMI  -> "SEMI" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | CONTOF  -> "CONTOF" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | END  -> "END" 
  | PROC  -> "PROC" 
  | CALL  -> "CALL" 
  | RETURN  -> "RETURN" 
  | REC  -> "REC" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | FI  -> "FI" 
  | DECLS  -> "DECLS" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | BINOP _ -> "BINOP" 
  | NAME _ -> "NAME" 
  | STRING _ -> "STRING" 
  | BOOL _ -> "BOOL" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRAC  -> (null : System.Object) 
  | RBRAC  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | TILDE  -> (null : System.Object) 
  | INT_T  -> (null : System.Object) 
  | BOOL_T  -> (null : System.Object) 
  | STRING_T  -> (null : System.Object) 
  | VOID_T  -> (null : System.Object) 
  | ASG  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | CONTOF  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | PROC  -> (null : System.Object) 
  | CALL  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DECLS  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | BINOP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 10us; 65535us; 6us; 22us; 12us; 22us; 20us; 21us; 41us; 22us; 67us; 22us; 77us; 23us; 79us; 22us; 84us; 24us; 86us; 22us; 93us; 22us; 7us; 65535us; 6us; 69us; 12us; 69us; 41us; 69us; 67us; 66us; 79us; 66us; 86us; 66us; 93us; 69us; 10us; 65535us; 0us; 14us; 8us; 9us; 10us; 63us; 38us; 63us; 43us; 63us; 55us; 63us; 57us; 63us; 64us; 63us; 81us; 82us; 88us; 89us; 6us; 65535us; 10us; 11us; 38us; 39us; 43us; 44us; 55us; 56us; 57us; 58us; 64us; 65us; 3us; 65535us; 67us; 68us; 79us; 80us; 86us; 87us; 4us; 65535us; 6us; 92us; 12us; 13us; 41us; 92us; 93us; 92us; 3us; 65535us; 6us; 7us; 41us; 42us; 93us; 94us; 20us; 65535us; 2us; 3us; 4us; 100us; 29us; 30us; 31us; 32us; 34us; 35us; 36us; 37us; 46us; 47us; 50us; 100us; 53us; 54us; 61us; 62us; 70us; 71us; 72us; 73us; 75us; 76us; 103us; 96us; 108us; 97us; 109us; 98us; 111us; 100us; 114us; 99us; 115us; 100us; 118us; 100us; 5us; 65535us; 4us; 5us; 50us; 51us; 111us; 112us; 115us; 116us; 118us; 119us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 4us; 5us; 6us; 7us; 9us; 20us; 28us; 39us; 46us; 50us; 55us; 59us; 80us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 4us; 1us; 38us; 39us; 46us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 2us; 12us; 13us; 2us; 13us; 14us; 2us; 13us; 31us; 2us; 13us; 32us; 1us; 13us; 1us; 13us; 1us; 14us; 2us; 15us; 16us; 1us; 15us; 4us; 15us; 38us; 39us; 46us; 1us; 16us; 4us; 16us; 38us; 39us; 46us; 1us; 16us; 1us; 16us; 4us; 16us; 38us; 39us; 46us; 1us; 17us; 4us; 17us; 38us; 39us; 46us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 4us; 19us; 38us; 39us; 46us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 2us; 21us; 22us; 5us; 21us; 22us; 38us; 39us; 46us; 2us; 21us; 22us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 23us; 4us; 23us; 38us; 39us; 46us; 2us; 24us; 25us; 1us; 25us; 1us; 25us; 2us; 27us; 28us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 1us; 29us; 4us; 29us; 38us; 39us; 46us; 1us; 30us; 4us; 30us; 38us; 39us; 46us; 1us; 30us; 1us; 30us; 4us; 30us; 38us; 39us; 46us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 2us; 35us; 36us; 1us; 36us; 1us; 36us; 2us; 37us; 45us; 4us; 38us; 39us; 39us; 46us; 4us; 38us; 39us; 43us; 46us; 4us; 38us; 39us; 44us; 46us; 4us; 38us; 39us; 46us; 46us; 5us; 38us; 39us; 46us; 49us; 50us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 50us; 1us; 50us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 48us; 51us; 54us; 57us; 59us; 61us; 63us; 66us; 68us; 73us; 75us; 80us; 82us; 84us; 89us; 91us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 119us; 121us; 123us; 125us; 127us; 129us; 132us; 138us; 141us; 144us; 146us; 148us; 150us; 152us; 154us; 159us; 162us; 164us; 166us; 169us; 171us; 173us; 176us; 178us; 183us; 185us; 190us; 192us; 194us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 232us; 234us; 236us; 239us; 244us; 249us; 254us; 259us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; |]
let _fsyacc_action_rows = 120
let _fsyacc_actionTableElements = [|7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 0us; 49152us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 3us; 49152us; 3us; 103us; 8us; 101us; 35us; 114us; 7us; 16432us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 0us; 49152us; 8us; 16418us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 24us; 77us; 27us; 83us; 32us; 90us; 0us; 49152us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 0us; 49152us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 0us; 49152us; 8us; 32768us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 24us; 77us; 27us; 83us; 32us; 90us; 0us; 49152us; 1us; 32768us; 0us; 15us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 5us; 32768us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 1us; 16396us; 3us; 25us; 2us; 32768us; 3us; 25us; 36us; 27us; 2us; 32768us; 3us; 25us; 36us; 78us; 2us; 32768us; 3us; 25us; 36us; 85us; 1us; 32768us; 4us; 26us; 0us; 16397us; 0us; 16398us; 2us; 32768us; 3us; 31us; 14us; 29us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 3us; 16399us; 3us; 103us; 8us; 101us; 35us; 114us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 4us; 32768us; 3us; 103us; 4us; 33us; 8us; 101us; 35us; 114us; 1us; 32768us; 14us; 34us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 3us; 16400us; 3us; 103us; 8us; 101us; 35us; 114us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 4us; 32768us; 3us; 103us; 8us; 101us; 18us; 38us; 35us; 114us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 1us; 32768us; 19us; 40us; 0us; 16401us; 8us; 16418us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 24us; 77us; 27us; 83us; 32us; 90us; 1us; 32768us; 22us; 43us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 1us; 32768us; 23us; 45us; 0us; 16402us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 3us; 16403us; 3us; 103us; 8us; 101us; 35us; 114us; 1us; 32768us; 36us; 49us; 1us; 32768us; 1us; 50us; 7us; 16432us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 1us; 32768us; 2us; 52us; 0us; 16404us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 4us; 32768us; 3us; 103us; 8us; 101us; 29us; 55us; 35us; 114us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 2us; 32768us; 30us; 57us; 31us; 60us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 1us; 32768us; 31us; 59us; 0us; 16405us; 0us; 16406us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 3us; 16407us; 3us; 103us; 8us; 101us; 35us; 114us; 1us; 16408us; 16us; 64us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 0us; 16409us; 1us; 16411us; 6us; 67us; 5us; 16410us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 0us; 16412us; 2us; 32768us; 3us; 72us; 5us; 70us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 3us; 16413us; 3us; 103us; 8us; 101us; 35us; 114us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 4us; 32768us; 3us; 103us; 4us; 74us; 8us; 101us; 35us; 114us; 1us; 32768us; 5us; 75us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 3us; 16414us; 3us; 103us; 8us; 101us; 35us; 114us; 5us; 32768us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 1us; 32768us; 1us; 79us; 5us; 16410us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 1us; 32768us; 2us; 81us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 0us; 16415us; 1us; 32768us; 24us; 84us; 5us; 32768us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 1us; 32768us; 1us; 86us; 5us; 16410us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 1us; 32768us; 2us; 88us; 7us; 32768us; 7us; 46us; 17us; 36us; 21us; 41us; 25us; 48us; 26us; 61us; 28us; 53us; 36us; 28us; 0us; 16416us; 1us; 32768us; 37us; 91us; 0us; 16417us; 1us; 16419us; 16us; 93us; 8us; 16418us; 9us; 20us; 10us; 16us; 11us; 17us; 12us; 18us; 13us; 19us; 24us; 77us; 27us; 83us; 32us; 90us; 0us; 16420us; 1us; 16421us; 1us; 111us; 4us; 32768us; 3us; 103us; 4us; 104us; 8us; 101us; 35us; 114us; 2us; 16427us; 3us; 103us; 8us; 101us; 4us; 32768us; 2us; 110us; 3us; 103us; 8us; 101us; 35us; 114us; 2us; 16430us; 3us; 103us; 8us; 101us; 4us; 16433us; 3us; 103us; 6us; 118us; 8us; 101us; 35us; 114us; 1us; 32768us; 36us; 102us; 0us; 16422us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 0us; 16428us; 7us; 16432us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 1us; 32768us; 2us; 113us; 0us; 16429us; 7us; 32768us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 7us; 16432us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 1us; 32768us; 4us; 117us; 0us; 16431us; 7us; 16432us; 1us; 109us; 3us; 115us; 20us; 108us; 36us; 95us; 37us; 107us; 38us; 106us; 39us; 105us; 0us; 16434us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 17us; 21us; 29us; 30us; 39us; 40us; 48us; 49us; 57us; 58us; 67us; 68us; 70us; 71us; 72us; 73us; 74us; 75us; 81us; 83us; 86us; 89us; 92us; 94us; 95us; 96us; 99us; 107us; 111us; 119us; 124us; 126us; 134us; 138us; 146us; 151us; 159us; 161us; 162us; 171us; 173us; 181us; 183us; 184us; 192us; 196us; 198us; 200us; 208us; 210us; 211us; 219us; 224us; 232us; 235us; 243us; 245us; 246us; 247us; 255us; 259us; 261us; 269us; 270us; 272us; 278us; 279us; 282us; 290us; 294us; 302us; 307us; 309us; 317us; 321us; 327us; 329us; 335us; 337us; 345us; 346us; 348us; 354us; 356us; 362us; 364us; 372us; 373us; 375us; 376us; 378us; 387us; 388us; 390us; 395us; 398us; 403us; 406us; 411us; 413us; 414us; 422us; 423us; 424us; 425us; 426us; 434us; 442us; 443us; 451us; 453us; 454us; 462us; 470us; 472us; 473us; 481us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 2us; 3us; 2us; 3us; 6us; 5us; 5us; 2us; 5us; 7us; 5us; 2us; 1us; 3us; 0us; 1us; 3us; 3us; 6us; 7us; 8us; 2us; 0us; 1us; 3us; 1us; 3us; 4us; 1us; 1us; 1us; 2us; 3us; 4us; 3us; 3us; 0us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 16391us; 16392us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 16406us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 16423us; 16424us; 16425us; 16426us; 65535us; 65535us; 16428us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 16431us; 65535us; 16434us; |]
let _fsyacc_reductions ()  =    [| 
# 365 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 374 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startExp));
# 383 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startExpList));
# 392 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startDecList));
# 401 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startStm));
# 410 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startStmList));
# 419 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startDec));
# 428 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                             _1 
                   )
# 32 "Parser.fsy"
                 : Stm));
# 439 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                             IntT 
                   )
# 35 "Parser.fsy"
                 : 'Type));
# 449 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                             BoolT 
                   )
# 36 "Parser.fsy"
                 : 'Type));
# 459 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                             StringT 
                   )
# 37 "Parser.fsy"
                 : 'Type));
# 469 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                             VoidT 
                   )
# 38 "Parser.fsy"
                 : 'Type));
# 479 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                             RefT _2 
                   )
# 39 "Parser.fsy"
                 : 'Type));
# 490 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                             ArrayT _1 
                   )
# 40 "Parser.fsy"
                 : 'Type));
# 501 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                     TypedId(_1,_2) 
                   )
# 43 "Parser.fsy"
                 : 'TypedName));
# 513 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                             Asg(Var _1,_3) 
                   )
# 46 "Parser.fsy"
                 : Stm));
# 525 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                ArrayAsg(Var _1,_3,_6) 
                   )
# 47 "Parser.fsy"
                 : Stm));
# 538 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                       While(_2,Seq _4) 
                   )
# 48 "Parser.fsy"
                 : Stm));
# 550 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                Block(_2,Seq _4) 
                   )
# 49 "Parser.fsy"
                 : Stm));
# 562 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                PrintLn _2 
                   )
# 50 "Parser.fsy"
                 : Stm));
# 573 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                Call(Apply(_2, _4)) 
                   )
# 52 "Parser.fsy"
                 : Stm));
# 585 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                Cond(_2,Seq _4,Seq _6) 
                   )
# 53 "Parser.fsy"
                 : Stm));
# 598 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                Cond(_2,Seq _4,Seq []) 
                   )
# 54 "Parser.fsy"
                 : Stm));
# 610 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                Return _2 
                   )
# 55 "Parser.fsy"
                 : Stm));
# 621 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                               [_1] 
                   )
# 58 "Parser.fsy"
                 : Stm list));
# 632 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 59 "Parser.fsy"
                 : Stm list));
# 644 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                               [] 
                   )
# 62 "Parser.fsy"
                 : 'IdList));
# 654 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                               [_1] 
                   )
# 63 "Parser.fsy"
                 : 'IdList));
# 665 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'IdList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 64 "Parser.fsy"
                 : 'IdList));
# 677 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                     VarDec(_1,_3) 
                   )
# 67 "Parser.fsy"
                 : Dec));
# 689 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                                     ArrayDec(_1,_3,_6) 
                   )
# 68 "Parser.fsy"
                 : Dec));
# 702 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'IdList)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                                     ProcDec(_2,false,_3,_5,_7) 
                   )
# 69 "Parser.fsy"
                 : Dec));
# 716 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'IdList)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                                     ProcDec(_3,true,_4,_6,_8) 
                   )
# 70 "Parser.fsy"
                 : Dec));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                                     Decls(_2) 
                   )
# 71 "Parser.fsy"
                 : Dec));
# 741 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                               [] 
                   )
# 74 "Parser.fsy"
                 : Dec list));
# 751 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                               [_1] 
                   )
# 75 "Parser.fsy"
                 : Dec list));
# 762 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 76 "Parser.fsy"
                 : Dec list));
# 774 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                                Var _1 
                   )
# 79 "Parser.fsy"
                 : Exp));
# 785 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                                Prop(_1, _3) 
                   )
# 80 "Parser.fsy"
                 : Exp));
# 797 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                ArrayAcc(_1, _3) 
                   )
# 81 "Parser.fsy"
                 : Exp));
# 809 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                                Int _1 
                   )
# 82 "Parser.fsy"
                 : Exp));
# 820 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                                Bool _1 
                   )
# 83 "Parser.fsy"
                 : Exp));
# 831 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                                String _1
                   )
# 84 "Parser.fsy"
                 : Exp));
# 842 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                                ContOf _2 
                   )
# 85 "Parser.fsy"
                 : Exp));
# 853 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                                _2 
                   )
# 86 "Parser.fsy"
                 : Exp));
# 864 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                Apply(_1, _3) 
                   )
# 87 "Parser.fsy"
                 : Exp));
# 876 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                                Apply(_2, [_1; _3]) 
                   )
# 88 "Parser.fsy"
                 : Exp));
# 889 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                                Array(_2) 
                   )
# 89 "Parser.fsy"
                 : Exp));
# 900 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                               [ ] 
                   )
# 92 "Parser.fsy"
                 : Exp list));
# 910 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                               [_1]   
                   )
# 93 "Parser.fsy"
                 : Exp list));
# 921 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 94 "Parser.fsy"
                 : Exp list));
|]
# 934 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 43;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Stm =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let Exp lexer lexbuf : Exp =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let ExpList lexer lexbuf : Exp list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
let DecList lexer lexbuf : Dec list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 6))
let Stm lexer lexbuf : Stm =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 8))
let StmList lexer lexbuf : Stm list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 10))
let Dec lexer lexbuf : Dec =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 12))
